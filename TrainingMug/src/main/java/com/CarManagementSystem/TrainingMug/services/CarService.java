package com.CarManagementSystem.TrainingMug.services;import com.CarManagementSystem.TrainingMug.dto.CarDTO;import com.CarManagementSystem.TrainingMug.entities.CarEntity;import com.CarManagementSystem.TrainingMug.exceptions.ResourceNotFoundException;import com.CarManagementSystem.TrainingMug.repositories.CarRepository;import org.modelmapper.ModelMapper;import org.springframework.data.domain.Page;import org.springframework.data.domain.Pageable;import org.springframework.stereotype.Service;import java.util.List;import java.util.Optional;import java.util.stream.Collectors;@Servicepublic class CarService {    private final CarRepository carRepository;    private final ModelMapper modelMapper;    public CarService(CarRepository carRepository, ModelMapper modelMapper)    {        this.carRepository= carRepository;        this.modelMapper= modelMapper;    }    public Optional<CarDTO> getCarById(Long id) {        return carRepository.findById(id).map(carEntity -> modelMapper.map(carEntity, CarDTO.class));    }    public Page<CarDTO> getAllCars(Pageable pageable) {        // Fetch a paginated list of CarEntity objects        Page<CarEntity> carPage = carRepository.findAll(pageable);        // Map each CarEntity to CarDTO and return as a paginated Page        return carPage.map(carEntity -> modelMapper.map(carEntity, CarDTO.class));    }    public List<CarDTO> searchCars(String query) {        List<CarEntity> carEntities = carRepository.searchCars(query);        return carEntities                .stream()                .map(carEntity -> modelMapper.map(carEntity, CarDTO.class))                .collect(Collectors.toList());    }    public CarDTO createNewCar(CarDTO inputCar) {        CarEntity toSaveEntity = modelMapper.map(inputCar, CarEntity.class);        CarEntity savedCarEntity =  carRepository.save(toSaveEntity);        return  modelMapper.map(savedCarEntity, CarDTO.class);    }    public boolean isExistsByCarId(long id)    {        return carRepository.existsById(id);    }    public CarDTO updateCarById(Long id, CarDTO carDTO) {        boolean exists = isExistsByCarId(id);        if(!exists) throw new ResourceNotFoundException("Details of the Car with id :" + id + " is not found");        CarEntity carEntity = modelMapper.map(carDTO, CarEntity.class);        carEntity.setId(id);        CarEntity savedCarEntity = carRepository.save(carEntity);        return modelMapper.map(savedCarEntity, CarDTO.class);    }    public Boolean deleteCarById(Long id) {        boolean exists = carRepository.existsById(id);        if(!exists)        {            throw  new ResourceNotFoundException("Car with ID "+ id + " not found");        }        carRepository.deleteById(id);        return  true;    }}