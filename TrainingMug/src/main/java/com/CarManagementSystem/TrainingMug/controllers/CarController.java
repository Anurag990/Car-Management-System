package com.CarManagementSystem.TrainingMug.controllers;import com.CarManagementSystem.TrainingMug.dto.CarDTO;import com.CarManagementSystem.TrainingMug.exceptions.ResourceNotFoundException;import com.CarManagementSystem.TrainingMug.services.CarService;import io.swagger.v3.oas.annotations.Operation;import io.swagger.v3.oas.annotations.responses.ApiResponse;import io.swagger.v3.oas.annotations.responses.ApiResponses;import jakarta.validation.Valid;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Pageable;import org.springframework.data.domain.Sort;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.util.List;import java.util.Optional;@RestController@RequestMapping(path = "/car")public class CarController {        private final CarService carService;       public CarController(CarService carService)       {               this.carService = carService;       }    @Operation(summary = "Get a car by ID", description = "Retrieve details of a car by its ID.")    @ApiResponses(value = {            @ApiResponse(responseCode = "200", description = "Successfully retrieved car details"),            @ApiResponse(responseCode = "404", description = "Car not found for the given ID")    })        @GetMapping("/{id}")        public ResponseEntity<CarDTO> getCarById(@PathVariable Long id)        {            Optional<CarDTO> carDTO = carService.getCarById(id);            return  carDTO.map(carDTO1 -> ResponseEntity.ok(carDTO1))                    .orElseThrow(() -> new ResourceNotFoundException("Car Detail are not found with this id : " + id));        }    @Operation(summary = "Get all cars with pagination and sorting", description = "Retrieve a paginated list of cars with sorting options.")    @ApiResponses(value = {            @ApiResponse(responseCode = "200", description = "Successfully retrieved the list of cars"),    })    @GetMapping    public ResponseEntity<Page<CarDTO>> getAllCars(            @RequestParam(defaultValue = "0") int page,            @RequestParam(defaultValue = "10") int size,            @RequestParam(defaultValue = "id") String sortBy) {        // Create Pageable instance        Pageable pageable = PageRequest.of(page, size, Sort.by(sortBy));        // Fetch paginated result        Page<CarDTO> carPage = carService.getAllCars(pageable);        return ResponseEntity.ok(carPage);    }    @Operation(summary = "Search cars by query", description = "Search cars by their name, model, year, color, or fuel type.")    @ApiResponses(value = {            @ApiResponse(responseCode = "200", description = "Successfully retrieved search results"),    })     @GetMapping("/search")     public ResponseEntity<List<CarDTO>> searchCars(@RequestParam String query) {        return ResponseEntity.ok(carService.searchCars(query));     }    @Operation(summary = "Create a new car", description = "Add a new car to the database.")    @ApiResponses(value = {            @ApiResponse(responseCode = "201", description = "Car successfully created"),            @ApiResponse(responseCode = "400", description = "Invalid input")    })     @PostMapping     public ResponseEntity<CarDTO> createNewCar(@RequestBody  @Valid CarDTO inputCar)     {         CarDTO savedCar =  carService.createNewCar(inputCar);         return new ResponseEntity<>(savedCar, HttpStatus.CREATED);     }    @Operation(summary = "Update car by ID", description = "Update car details by its ID.")    @ApiResponses(value = {            @ApiResponse(responseCode = "200", description = "Successfully updated the car"),            @ApiResponse(responseCode = "404", description = "Car not found for the given ID")    })     @PutMapping(path= "/{id}")     public ResponseEntity<CarDTO> updateCarById(@RequestBody CarDTO carDTO, @PathVariable Long id)     {         return ResponseEntity.ok(carService.updateCarById(id, carDTO));     }    @Operation(summary = "Delete car by ID", description = "Delete a car by its ID.")    @ApiResponses(value = {            @ApiResponse(responseCode = "200", description = "Successfully deleted the car"),            @ApiResponse(responseCode = "404", description = "Car not found for the given ID")    })     @DeleteMapping(path = "/{id}")     public  ResponseEntity<Boolean>deleteCarById(@PathVariable Long id)     {         carService.deleteCarById(id);         return ResponseEntity.ok(true);     }}